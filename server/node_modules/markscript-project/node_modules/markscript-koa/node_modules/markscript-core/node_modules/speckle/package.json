{
  "name": "speckle",
  "version": "0.1.3",
  "description": "Create SPARQL rules and queries using a typed API",
  "main": "dist/lib/index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/christyharagan/speckle.git"
  },
  "author": {
    "name": "Christy Haragan",
    "email": "christy.haragan.github@gmail.com",
    "url": "https://github.com/christyharagan"
  },
  "typescript": {
    "definition": "speckle.d.ts"
  },
  "keywords": [
    "sparql",
    "builder",
    "typescript"
  ],
  "license": "MIT",
  "readme": "Speckle Library\n==\n\nOverview\n--\n\nCreate SPARQL rules and queries using a typed API\n\nUsage\n--\n\nInstall:\n```\nnpm install speckle\n```\n\nBasic Usage:\n\n```TypeScript\nimport * as s from 'speckle'\n\nlet ex = s.prefix('l', 'http://example/')\n\n// Create a sparql rule set\nlet city = s.variable('city')\nlet country = s.variable('country')\nlet continent = s.variable('continent')\n\nlet rule = rule('cityInContinent')\n  .when(city, ex.uri('isIn'), country)\n  .and(country, ex.uri('isPartOf'), continent)\n  .then(city, ex.uri('isIn'), continent)\n\n// Serialise to SPARQL\nlet sparql = rule.toSparql()\n\n// Create a sparql query\nlet query = s.select(continent).where(ex.uri('London'), logic.uri('isIn'), continent)\n\n// Serialise to SPARQL\nsparql = query.toSparql()\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "f5df51287988df41252e869cde0a03a41929593c",
  "bugs": {
    "url": "https://github.com/christyharagan/speckle/issues"
  },
  "homepage": "https://github.com/christyharagan/speckle#readme",
  "_id": "speckle@0.1.3",
  "scripts": {},
  "_shasum": "fccd7a67176a71087a8ed816367b182af660c24b",
  "_from": "speckle@>=0.1.3 <0.2.0"
}
