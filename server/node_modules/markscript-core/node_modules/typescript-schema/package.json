{
  "name": "typescript-schema",
  "version": "0.7.5",
  "description": "A reflective type model for TypeScript applications",
  "main": "lib/index.js",
  "typings": "lib/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/christyharagan/ts-schema.git"
  },
  "author": {
    "name": "Christy Haragan",
    "email": "christy.haragan.github@gmail.com",
    "url": "https://github.com/christyharagan"
  },
  "keywords": [
    "typescript",
    "schema",
    "json",
    "types"
  ],
  "license": "MIT",
  "dependencies": {
    "typescript": "1.6.2"
  },
  "readme": "TypeScript Schema Library\n===\n\nOverview\n--\n\nA reflective type model for TypeScript applications. There are two primary models:\n\n * A raw model, which is a serialisable format (consider using [typescript-package](https://github.com/christyharagan/typescript-package) for the generation of this from a TypeScript package or project). References to types are stored as a {moduleName:string, name:string} object.\n * A fully resolved model, where all references are replaced with actual instances of that type. This is the model most useful for use.\n\nA high level over-view of the modules in this library are:\n\n * rawConverter: converts raw models to resolved models.\n * model: contains the type meta-model, both for raw and resolved models\n * factories: used by rawConverter. Contains the code for creating resolved model elements\n * equals: contains equality functions for resolved models\n * typeCloser: elements with type-parameters (classes, interfaces, etc.) are treated as type-constructors. To create an actual type, use typeCloser with arguments for the parameters\n * typeUtils: some useful functions for dealing with types\n * serialiserParser: use this to create a more readable serialised form of a raw model (and for parsing that form)\n * filter: used to reduce raw models to complete sub-models based off specific elements (e.g.: filtered to a closed model for a particular module, or class)\n * toString: used to create a unique identifier for various resolved model elements\n * expressionToLiteral: used to convert a resolved expression model into a pure javascript equivalent\n * visitor: used to easily navigate a resolved model\n\nUsage\n--\n\nInstall:\n```\nnpm install typescript-schema\n```\n\nBasic Usage:\n\n```TypeScript\nimport * as s from 'typescript-schema'\n\nlet rawModules:s.Map<s.Module>\n\n// Given a raw model, filter its contents to only contain types relevant to and referenced by some module\nlet filteredModules = s.filterRawModules(['moduleA'], rawModules)\n\n// Given a raw model, convert to a resolved one:\nlet resolvedModules = s.convertRawModules(rawModules)\n\n// Give a raw model, create a nice text format\nlet str = s.stringify(rawModules)\n// And parse it back into a raw model\nrawModules = s.parse(str)\n\nlet someInterfaceConstructor:s.InterfaceConstructor\nlet someTypeForT:s.Type\n// Given a type constructor (e.g. interface A<T>), create a type\ns.closeInterface(someInterfaceConstructor, [someTypeForT])\n\n// Visit the elements in a model\ns.modulesVisitor(resolveModules, {\n  onModule: function(module){\n    return <s.ModuleVisitor> {\n      onClassConstructor: function(cc) {\n        // etc\n      }\n    }\n  }\n})\n\n// Get the unique id for an element\nlet id = s.interfaceConstructorToString(someInterfaceConstructor)\n\nlet decorator:s.Decorator\n\n// For some expression (e.g. from a decorator)\nlet pureValue = s.expressionToLiteral(decorator.parameters[0])\n\nlet someOtherInterfaceConstructor\n\n// Compare two entities\nlet isEqual = someInterfaceConstructor.equals(someOtherInterfaceConstructor)\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "37b6515b8f15fa98cd6ae3b6e1d103158fbf8ad8",
  "bugs": {
    "url": "https://github.com/christyharagan/ts-schema/issues"
  },
  "homepage": "https://github.com/christyharagan/ts-schema#readme",
  "_id": "typescript-schema@0.7.5",
  "scripts": {},
  "_shasum": "0535a936539075ca1114d6ee847d592b735f2fbf",
  "_from": "typescript-schema@>=0.7.2 <0.8.0"
}
