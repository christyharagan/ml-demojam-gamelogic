{
  "name": "www-authenticate",
  "description": "Provides the functionality needed for a client to use HTTP Basic or Digest authentication.  Also provides primitives for parsing WWW-Authenticate and Authentication_Info headers.",
  "version": "0.6.2",
  "homepage": "https://github.com/randymized/www-authenticate",
  "author": {
    "name": "Randy McLaughlin",
    "email": "ot40ddj02@sneakemail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/randymized/www-authenticate.git"
  },
  "bugs": {
    "url": "https://github.com/randymized/www-authenticate/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/randymized/www-authenticate/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt simplemocha"
  },
  "devDependencies": {
    "mocha": "~1.9.0",
    "should": "~1.2.2",
    "grunt-contrib-jshint": "~0.4.0",
    "grunt-simple-mocha": "git://github.com/yaymukund/grunt-simple-mocha.git",
    "grunt-contrib-watch": "~0.3.1",
    "grunt": "~0.4.1"
  },
  "keywords": [
    "www-authenticate",
    "HTTP",
    "digest",
    "authentication"
  ],
  "readme": "# www-authenticate [![Build Status](https://secure.travis-ci.org/randymized/www-authenticate.png?branch=master)](http://travis-ci.org/randymized/www-authenticate)\n\n## Documentation\nProvides the functionality needed for a client to use HTTP Basic or Digest authentication.  Also provides primitives for parsing WWW-Authenticate and Authentication_Info headers.\n\nParses the content of a WWW-Authenticate header sent by a server. Interpret the authentication challenge posed. Then generate the credentials for Authorization headers for subsequent requests from the server.\n\n- Supports Basic and Digest authentication schemes.\n- Supports 'auth' quality of protection (qop) and challenges that do not include qop.\n- Supports MD5 and MD5-sess algorithms.\n- Assumes Node.js, but otherwise makes no assumtion about framework.\n\n\n## Limitations\n- Included tests only test Digest scheme against the rfc2617 example.\n- Most of the permutations of qop and algorithm have not been tested.\n- Little real-world testing.  That's where you can help!  Report any failures or submit a patch that resolves an authentication failure.\n- Will not parse WWW-Authenticate headers that contain more than one challenge.  Please send an example of one if you find one in the field or modify the parser to parse it.\n- Does not support auth-int qop, but will use auth qop if server allows either.  Support could surely be added in the future.\n- Response to challenges without qop have not been tested.\n\n## Getting Started\nInstall the module with: `npm install www-authenticate`\nSee examples below.\n\n## Examples\nUse the high level interface:\n```javascript\nvar www_authenticate = require('www-authenticate');\nvar authenticator= www_authenticate.authenticator(username,password);\n\n// Whenever you receive a response, send it to the authenticator.\n// The authenticator will parse and record any challenge it contains.\nauthenticator.get_challenge(response);\n\n//... now, whenever you make a request the authenticator will add an\n// authorization header if a challenge has been received...\n var options= {\n   method: \"GET\",\n   path: \"/dir/index.html\"\n }\n authenticator.authenticate_request_options(options);\n if (authenticator.err) throw err;  // or do something similarly drastic\n http.request(options);\n```\n---\nUse the low level interface:\n```javascript\nvar www_authenticate = require('www-authenticate');\nvar on_www_authenticate= www_authenticate(username,password);\n\n// now wait for HTTP/1.1 401 Unauthorized and then parse the WWW_Authenticate header\nvar authenticator= on_www_authenticate(response.headers['www-authenticate']);\nif (authenticator.err) throw err; // or do something similarly drastic\n\n//... now, whenever you make a request, add an Authorization header:\nresponse.setHeader('authorization', authenticator.authorize('GET',url));\n```\n---\nParse www-authenticate or authentication-info headers:\n```javascript\nvar parsers = require('www-authenticate').parsers;\nvar parsed= new parsers.WWW_Authenticate(request.headers['www-authenticate']);\nconsole.log(parsed.scheme);\nconsole.log(parsed.parms.nonce);\n\nvar parsed= new parsers.Authentication_Info(request.headers['authentication-info']);\nconsole.log(parsed.parms.nonce);\n```\n\n### User credentials:\n\nThis module exports a `user_credentials` function.  When called, it returns a `user_credentials` object that uses the username and password to generate components of an Authentication header without exposing the password.  A `user_credentials` object may be used in place of the `username` and `password` arguments.\n\nWithout user credentials:\n```javascript\nvar www_authenticate = require('www-authenticate');\nvar authenticator= www_authenticate.authenticator(username,password);\n```\n\nWith user credentials:\n```javascript\nvar www_authenticate = require('www-authenticate');\nvar my_credentials= www_authenticate.user_credentials(\"Me\",\"My Password\");\nvar authenticator= www_authenticate.authenticator(my_credentials);\n```\n\nIn the above example, `my_credentials` might actually be generated in a separate module and passed around instead of the plain text username and password, making accidental pasword disclosure less likely.\n\n### Options:\n\nIn the above examples, an option object may be passed in addition to the username and password (or user credentials). The following options are supported:\n- cnonce: provides a string to be used as the cnonce in digest authentication Authorization headers.  If this option is not provided, a random cnonce will be generated.\n- sendImmediately: (high level interface only).  If this option tests true, an Authorization  header will always be produced, even if a WWW-Authenticate header has not been received.  Until a WWW-Authenticate header is received, a Basic Authorization header will be generated.  Once a WWW-Authenticate header is received, it's challenge will define the content of the Authorization header.\n\n### WWW-Authenticate header parser:\nThis module exports the parser that is used internally to parse a WWW-Authenticate header.  Please see the tests for usage examples.\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n- v0.6.0: Add sendImmediately option.  Inspired by `request` module.\n- v0.5.0: The higher-level interface is now exported directly by the module\n- v0.4.0: Provides a higher-level interface\n- v0.3.0: If password is null, it, and preceding ':' will not be included in hash\n\n## License\nCopyright (c) 2013 Randy McLaughlin\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "www-authenticate@0.6.2",
  "dist": {
    "shasum": "b7a7d487bdc5a8b423a4d8fd5f9c661adde50ebf",
    "tarball": "http://registry.npmjs.org/www-authenticate/-/www-authenticate-0.6.2.tgz"
  },
  "_from": "www-authenticate@>=0.6.2 <0.7.0",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "randymized",
    "email": "8b629a9884@snkmail.com"
  },
  "maintainers": [
    {
      "name": "randymized",
      "email": "8b629a9884@snkmail.com"
    }
  ],
  "directories": {},
  "_shasum": "b7a7d487bdc5a8b423a4d8fd5f9c661adde50ebf",
  "_resolved": "https://registry.npmjs.org/www-authenticate/-/www-authenticate-0.6.2.tgz"
}
