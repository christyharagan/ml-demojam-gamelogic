{
  "name": "markscript-uservices",
  "version": "0.3.0",
  "description": "Deploy remote proxies of uServices from Marklogic",
  "main": "lib/index.js",
  "typings": "lib/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/christyharagan/markscript-uservices.git"
  },
  "author": {
    "name": "Christy Haragan",
    "email": "christy.haragan.github@gmail.com",
    "url": "https://github.com/christyharagan"
  },
  "keywords": [
    "marklogic",
    "uservices",
    "service",
    "portable",
    "asynchronous",
    "observable",
    "actor",
    "micro"
  ],
  "license": "MIT",
  "dependencies": {
    "marklogic": "1.0.2",
    "markscript-core": "^0.3.3",
    "ml-admin": "^0.5.0",
    "ml-typescript-definitions": "^0.3.0",
    "rx": "^2.5.3",
    "speckle": "^0.2.0",
    "typescript-schema": "^0.7.5",
    "typescript-package": "^0.3.4",
    "uservices": "^0.6.0"
  },
  "readme": "MarkScript uServices Library\n==\n\nOverview\n--\n\nDeploy remote proxies of [uServices](https://github.com/christyharagan/uservices) from Marklogic.\n\nUsage\n--\n\nInstall:\n```\nnpm install markscript-uservices\n```\n\nBasic Usage:\n\nTo use this as part of a MarkScript build, add this property to the root of your build options:\n\n```TypeScript\nimport {UServicesPlugin} from 'markscript-uservices'\n\nlet buildOptions = {\n  plugins: {\n    uservices: [UServicesPlugin, {}]\n  }\n  // etc\n}\n```\n\nFor a uService on Marklogic:\n\n```TypeScript\nimport * as mu from 'markscript-uservices'\nimport {Observable} from 'uservices'\nimport {Message} from '../common/models/message'\nimport {ChatService} from '../common/services/chatService'\n\n@mu.mlService()\nexport class ChatService extends extends mu.AbstractMLService {\n  @mu.mlMethod({\n    method: 'put'\n  })\n  sendMessage(message: Message): Promise<boolean> {\n    xdmp.documentInsert('/chatMessages/' + message.timestamp, message)\n    resolve(true)\n  }\n\n  @mu.mlEvent({\n    states: ['create', 'modify'],\n    scope: '/chatMessages/'\n  })\n  messageBroadcast(): Observable<Message> {\n    return this.observableFactory().map(function(doc: Doc<Message>{\n      return doc.value\n    })\n  }\n}\n\n```\n\nThen to proxy that to another tier:\n\n```TypeScript\nimport {createRemoteProxy} from 'markscript-uservices'\nimport * as RxRouter from 'koa-rx-router'\n\nlet router = new RxRouter()\nlet chatService = createRemoteProxy(chatSpec, client, router)\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "3d96e3a610d911534291945b0c5a0e9cce3700a7",
  "bugs": {
    "url": "https://github.com/christyharagan/markscript-uservices/issues"
  },
  "homepage": "https://github.com/christyharagan/markscript-uservices#readme",
  "_id": "markscript-uservices@0.3.0",
  "scripts": {},
  "_shasum": "35d59d8623a532df63f032f17d9755193bf94af9",
  "_from": "markscript-uservices@*"
}
